package Graphics;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import Resources.Empty;
import Structures.*;
import Resources.King;
import Resources.Knight;
import Resources.Mapping;
import Resources.Movement;
import Resources.Pawn;
import Resources.Piece;
import Resources.Queen;
import java.awt.Color;
import java.awt.Component;
import static java.lang.Math.abs;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import org.jvnet.substance.SubstanceLookAndFeel;

/**
 *
 * @author Herbert Paz
 */
public class Principal extends javax.swing.JFrame {

    Piece[][] principal_board = new Piece[8][8];
    JLabel[][] matriz_label = new JLabel[8][8];
    private static LinkedList check = new LinkedList();
    private static LinkedList knight = new LinkedList();
    private static LinkedList queen = new LinkedList();
    private static LinkedList lista_peon = new LinkedList();

    public Principal() {
        JFrame.setDefaultLookAndFeelDecorated(true);
        SubstanceLookAndFeel.setSkin("org.jvnet.substance.skin.BusinessBlackSteelSkin");
        SubstanceLookAndFeel.setCurrentTheme("org.jvnet.substance.theme.SubstanceAquaTheme");
        SubstanceLookAndFeel.setCurrentWatermark("org.jvnet.substance.watermark.SubstanceLatchWatermark");
        initComponents();
        this.setTitle("CHESS ORACLE");
        this.setExtendedState(MAXIMIZED_BOTH);
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                principal_board[i][j] = new Empty(0);
            }
        }
        matriz_label[0][0] = Label00;
        matriz_label[0][1] = Label01;
        matriz_label[0][2] = Label02;
        matriz_label[0][3] = Label03;
        matriz_label[0][4] = Label04;
        matriz_label[0][5] = Label05;
        matriz_label[0][6] = Label06;
        matriz_label[0][7] = Label07;
        matriz_label[1][0] = Label10;
        matriz_label[1][1] = Label11;
        matriz_label[1][2] = Label12;
        matriz_label[1][3] = Label13;
        matriz_label[1][4] = Label14;
        matriz_label[1][5] = Label15;
        matriz_label[1][6] = Label16;
        matriz_label[1][7] = Label17;
        matriz_label[2][0] = Label20;
        matriz_label[2][1] = Label21;
        matriz_label[2][2] = Label22;
        matriz_label[2][3] = Label23;
        matriz_label[2][4] = Label24;
        matriz_label[2][5] = Label25;
        matriz_label[2][6] = Label26;
        matriz_label[2][7] = Label27;
        matriz_label[3][0] = Label30;
        matriz_label[3][1] = Label31;
        matriz_label[3][2] = Label32;
        matriz_label[3][3] = Label33;
        matriz_label[3][4] = Label34;
        matriz_label[3][5] = Label35;
        matriz_label[3][6] = Label36;
        matriz_label[3][7] = Label37;
        matriz_label[4][0] = Label40;
        matriz_label[4][1] = Label41;
        matriz_label[4][2] = Label42;
        matriz_label[4][3] = Label43;
        matriz_label[4][4] = Label44;
        matriz_label[4][5] = Label45;
        matriz_label[4][6] = Label46;
        matriz_label[4][7] = Label47;
        matriz_label[5][0] = Label50;
        matriz_label[5][1] = Label51;
        matriz_label[5][2] = Label52;
        matriz_label[5][3] = Label53;
        matriz_label[5][4] = Label54;
        matriz_label[5][5] = Label55;
        matriz_label[5][6] = Label56;
        matriz_label[5][7] = Label57;
        matriz_label[6][0] = Label60;
        matriz_label[6][1] = Label61;
        matriz_label[6][2] = Label62;
        matriz_label[6][3] = Label63;
        matriz_label[6][4] = Label64;
        matriz_label[6][5] = Label65;
        matriz_label[6][6] = Label66;
        matriz_label[6][7] = Label67;
        matriz_label[7][0] = Label70;
        matriz_label[7][1] = Label71;
        matriz_label[7][2] = Label72;
        matriz_label[7][3] = Label73;
        matriz_label[7][4] = Label74;
        matriz_label[7][5] = Label75;
        matriz_label[7][6] = Label76;
        matriz_label[7][7] = Label77;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Menu = new javax.swing.JDialog();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        Show = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jLabel22 = new javax.swing.JLabel();
        Label00 = new javax.swing.JLabel();
        Label01 = new javax.swing.JLabel();
        Label02 = new javax.swing.JLabel();
        Label03 = new javax.swing.JLabel();
        Label04 = new javax.swing.JLabel();
        Label05 = new javax.swing.JLabel();
        Label06 = new javax.swing.JLabel();
        Label07 = new javax.swing.JLabel();
        Label10 = new javax.swing.JLabel();
        Label11 = new javax.swing.JLabel();
        Label12 = new javax.swing.JLabel();
        Label13 = new javax.swing.JLabel();
        Label14 = new javax.swing.JLabel();
        Label15 = new javax.swing.JLabel();
        Label16 = new javax.swing.JLabel();
        Label17 = new javax.swing.JLabel();
        Label20 = new javax.swing.JLabel();
        Label21 = new javax.swing.JLabel();
        Label22 = new javax.swing.JLabel();
        Label23 = new javax.swing.JLabel();
        Label24 = new javax.swing.JLabel();
        Label25 = new javax.swing.JLabel();
        Label26 = new javax.swing.JLabel();
        Label27 = new javax.swing.JLabel();
        Label30 = new javax.swing.JLabel();
        Label31 = new javax.swing.JLabel();
        Label32 = new javax.swing.JLabel();
        Label33 = new javax.swing.JLabel();
        Label34 = new javax.swing.JLabel();
        Label35 = new javax.swing.JLabel();
        Label36 = new javax.swing.JLabel();
        Label37 = new javax.swing.JLabel();
        Label40 = new javax.swing.JLabel();
        Label41 = new javax.swing.JLabel();
        Label42 = new javax.swing.JLabel();
        Label43 = new javax.swing.JLabel();
        Label44 = new javax.swing.JLabel();
        Label45 = new javax.swing.JLabel();
        Label46 = new javax.swing.JLabel();
        Label47 = new javax.swing.JLabel();
        Label50 = new javax.swing.JLabel();
        Label51 = new javax.swing.JLabel();
        Label52 = new javax.swing.JLabel();
        Label53 = new javax.swing.JLabel();
        Label54 = new javax.swing.JLabel();
        Label55 = new javax.swing.JLabel();
        Label56 = new javax.swing.JLabel();
        Label57 = new javax.swing.JLabel();
        Label60 = new javax.swing.JLabel();
        Label61 = new javax.swing.JLabel();
        Label62 = new javax.swing.JLabel();
        Label63 = new javax.swing.JLabel();
        Label64 = new javax.swing.JLabel();
        Label65 = new javax.swing.JLabel();
        Label66 = new javax.swing.JLabel();
        Label67 = new javax.swing.JLabel();
        Label70 = new javax.swing.JLabel();
        Label71 = new javax.swing.JLabel();
        Label72 = new javax.swing.JLabel();
        Label73 = new javax.swing.JLabel();
        Label74 = new javax.swing.JLabel();
        Label75 = new javax.swing.JLabel();
        Label76 = new javax.swing.JLabel();
        Label77 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cbColor = new javax.swing.JComboBox();
        Spinner_i = new javax.swing.JSpinner();
        cbPiece = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        Spinner_j = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jButton3.setText("pawn crown");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setText("eat queen");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton4MouseEntered(evt);
            }
        });

        jButton5.setText(" eat knight");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jButton6.setText("check");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout MenuLayout = new javax.swing.GroupLayout(Menu.getContentPane());
        Menu.getContentPane().setLayout(MenuLayout);
        MenuLayout.setHorizontalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(93, 93, 93))
        );
        MenuLayout.setVerticalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel22.setText("Successions");

        javax.swing.GroupLayout ShowLayout = new javax.swing.GroupLayout(Show.getContentPane());
        Show.getContentPane().setLayout(ShowLayout);
        ShowLayout.setHorizontalGroup(
            ShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowLayout.createSequentialGroup()
                .addGroup(ShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShowLayout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(jLabel22))
                    .addGroup(ShowLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        ShowLayout.setVerticalGroup(
            ShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ShowLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jLabel22)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Label00.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label01.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label02.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label03.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label04.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label05.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label06.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label07.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label30.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label34.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label36.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label37.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label40.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label41.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label43.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label44.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label45.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label46.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label47.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label50.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label51.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label52.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label53.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label54.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label55.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label56.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label57.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label60.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label61.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label62.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label63.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label64.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label65.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label66.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label67.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label70.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label71.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label72.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label73.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label74.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label75.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        Label76.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background2.png"))); // NOI18N

        Label77.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background1.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel1.setText("0");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel2.setText("1");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel3.setText("2");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel4.setText("3");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel5.setText("4");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel6.setText("0");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel7.setText("6");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel8.setText("5");

        jLabel9.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel9.setText("7");

        jLabel10.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel10.setText("1");

        jLabel11.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel11.setText("2");

        jLabel12.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel12.setText("3");

        jLabel13.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel13.setText("4");

        jLabel14.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel14.setText("5");

        jLabel15.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel15.setText("6");

        jLabel16.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel16.setText("7");

        jLabel17.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel17.setText("Chess Oracle");

        cbColor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Black", "White" }));

        Spinner_i.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));

        cbPiece.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "King", "Queen", "Knight", "Pawn", "Empty" }));

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel18.setText("Kind");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel19.setText("Color");

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel20.setText("Y coordinate");

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel21.setText("X coordinate");

        Spinner_j.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton1.setText("Add");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton2.setText("successions");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Label70, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Label71, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Label72, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Label73, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Label74, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Label75, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Label76, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Label77))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Label00, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label10, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label20, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label30, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label40, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label50, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label60, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Label41, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Label42, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Label43, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Label44, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Label45, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Label46, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Label47, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Label01, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label02, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label03, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label04, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label05, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label06, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label07, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Label11, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label12, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label13, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label14, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label15, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label16, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label17, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Label21, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label22, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label23, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label24, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label25, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label26, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label27, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Label31, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label32, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label33, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label34, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label35, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label36, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label37, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel18)
                                                        .addComponent(jLabel19))
                                                    .addGap(29, 29, 29)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(cbPiece, javax.swing.GroupLayout.Alignment.TRAILING, 0, 147, Short.MAX_VALUE)
                                                        .addComponent(cbColor, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel20)
                                                        .addComponent(jLabel21))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(Spinner_i, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                                        .addComponent(Spinner_j))))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Label61, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label62, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label63, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label64, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label65, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label66, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label67, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Label51, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label52, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label53, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label54, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label55, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label56, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Label57, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(19, 19, 19)))))
                        .addGap(11, 11, 11))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel6)
                        .addGap(61, 61, 61)
                        .addComponent(jLabel10)
                        .addGap(62, 62, 62)
                        .addComponent(jLabel11)
                        .addGap(56, 56, 56)
                        .addComponent(jLabel12)
                        .addGap(62, 62, 62)
                        .addComponent(jLabel13)
                        .addGap(67, 67, 67)
                        .addComponent(jLabel14)
                        .addGap(61, 61, 61)
                        .addComponent(jLabel15)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel16)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(159, 159, 159))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(31, 31, 31)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1214, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(57, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Label07, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Label06, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Label05, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Label04, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Label02, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Label01, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Label00, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Label03, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Label10, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label11, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label12, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label13, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label14, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label15, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label16, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label17, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(cbColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Label27, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Label37, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Label26, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Label36, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Label25, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Label35, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Label24, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Label34, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Label23, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Label33, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Label22, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Label32, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Label20, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Label21, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Label30, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(16, 16, 16))))
                    .addComponent(Label31, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbPiece, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Spinner_i, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(Spinner_j, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Label40, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label41, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label42, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label43, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label44, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label45, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label46, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label47, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Label50, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label51, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label52, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label53, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label54, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label55, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label56, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label57, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Label67, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label66, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label65, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label64, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label63, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label62, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label60, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Label61, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(21, 21, 21)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Label70, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label71, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label72, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label73, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label74, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label75, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label76, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Label77, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel16)
                    .addComponent(jLabel15))
                .addGap(32, 32, 32))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(659, Short.MAX_VALUE)
                    .addComponent(jLabel9)
                    .addGap(86, 86, 86)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        int i = (int) Spinner_i.getValue();
        int j = (int) Spinner_j.getValue();
        String kind = (String) cbPiece.getSelectedItem();
        String color = (String) cbColor.getSelectedItem();
        String a = "Label" + i + j;
        for (int k = 0; k < 10; k++) {
            for (int l = 0; l < 10; l++) {
                if (i == k && j == l) {
                    if ("King".equals(kind)) {
                        if ("Black".equals(color)) {
                            if ((i + j) % 2 == 0) {
                                String path = "/images/KingN1.png";
                                URL url = this.getClass().getResource(path);
                                ImageIcon icon = new ImageIcon(url);
                                JLabel temp = matriz_label[i][j];
                                temp.setIcon(icon);
                                principal_board[i][j] = new King(2);
                            } else {
                                String path = "/images/KingN2.png";
                                URL url = this.getClass().getResource(path);
                                ImageIcon icon = new ImageIcon(url);
                                JLabel temp = matriz_label[i][j];
                                temp.setIcon(icon);
                                principal_board[i][j] = new King(2);
                            }
                        } else if ((i + j) % 2 == 0) {
                            String path = "/images/KingB1.png";
                            URL url = this.getClass().getResource(path);
                            ImageIcon icon = new ImageIcon(url);
                            JLabel temp = matriz_label[i][j];
                            temp.setIcon(icon);
                            principal_board[i][j] = new King(1);
                        } else {
                            String path = "/images/KingB2.png";
                            URL url = this.getClass().getResource(path);
                            ImageIcon icon = new ImageIcon(url);
                            JLabel temp = matriz_label[i][j];
                            temp.setIcon(icon);
                            principal_board[i][j] = new King(1);
                        }
                    } else if ("Queen".equals(kind)) {
                        if ("Black".equals(color)) {
                            if ((i + j) % 2 == 0) {
                                String path = "/images/QueenN1.png";
                                URL url = this.getClass().getResource(path);
                                ImageIcon icon = new ImageIcon(url);
                                JLabel temp = matriz_label[i][j];
                                temp.setIcon(icon);
                                principal_board[i][j] = new Queen(2);
                            } else {
                                String path = "/images/QueenN2.png";
                                URL url = this.getClass().getResource(path);
                                ImageIcon icon = new ImageIcon(url);
                                JLabel temp = matriz_label[i][j];
                                temp.setIcon(icon);
                                principal_board[i][j] = new Queen(2);
                            }
                        } else if ((i + j) % 2 == 0) {
                            String path = "/images/QueenB1.png";
                            URL url = this.getClass().getResource(path);
                            ImageIcon icon = new ImageIcon(url);
                            JLabel temp = matriz_label[i][j];
                            temp.setIcon(icon);
                            principal_board[i][j] = new Queen(1);
                        } else {
                            String path = "/images/QueenB2.png";
                            URL url = this.getClass().getResource(path);
                            ImageIcon icon = new ImageIcon(url);
                            JLabel temp = matriz_label[i][j];
                            temp.setIcon(icon);
                            principal_board[i][j] = new Queen(1);
                        }
                    } else if ("Knight".equals(kind)) {
                        if ("Black".equals(color)) {
                            if ((i + j) % 2 == 0) {
                                String path = "/images/KnightN1.png";
                                URL url = this.getClass().getResource(path);
                                ImageIcon icon = new ImageIcon(url);
                                JLabel temp = matriz_label[i][j];
                                temp.setIcon(icon);
                                principal_board[i][j] = new Knight(2);
                            } else {
                                String path = "/images/KnightN2.png";
                                URL url = this.getClass().getResource(path);
                                ImageIcon icon = new ImageIcon(url);
                                JLabel temp = matriz_label[i][j];
                                temp.setIcon(icon);
                                principal_board[i][j] = new Knight(2);
                            }
                        } else if ((i + j) % 2 == 0) {
                            String path = "/images/KnightB1.png";
                            URL url = this.getClass().getResource(path);
                            ImageIcon icon = new ImageIcon(url);
                            JLabel temp = matriz_label[i][j];
                            temp.setIcon(icon);
                            principal_board[i][j] = new Knight(1);
                        } else {
                            String path = "/images/KnightB2.png";
                            URL url = this.getClass().getResource(path);
                            ImageIcon icon = new ImageIcon(url);
                            JLabel temp = matriz_label[i][j];
                            temp.setIcon(icon);
                            principal_board[i][j] = new Knight(1);
                        }
                    } else if ("Pawn".equals(kind)) {
                        if ("Black".equals(color)) {
                            if ((i + j) % 2 == 0) {
                                String path = "/images/PawnN1.png";
                                URL url = this.getClass().getResource(path);
                                ImageIcon icon = new ImageIcon(url);
                                JLabel temp = matriz_label[i][j];
                                temp.setIcon(icon);
                                principal_board[i][j] = new Pawn(2);
                            } else {
                                String path = "/images/PawnN2.png";
                                URL url = this.getClass().getResource(path);
                                ImageIcon icon = new ImageIcon(url);
                                JLabel temp = matriz_label[i][j];
                                temp.setIcon(icon);
                                principal_board[i][j] = new Pawn(2);
                            }
                        } else if ((i + j) % 2 == 0) {
                            String path = "/images/PawnB1.png";
                            URL url = this.getClass().getResource(path);
                            ImageIcon icon = new ImageIcon(url);
                            JLabel temp = matriz_label[i][j];
                            temp.setIcon(icon);
                            principal_board[i][j] = new Pawn(1);
                        } else {
                            String path = "/images/PawnB2.png";
                            URL url = this.getClass().getResource(path);
                            ImageIcon icon = new ImageIcon(url);
                            JLabel temp = matriz_label[i][j];
                            temp.setIcon(icon);
                            principal_board[i][j] = new Pawn(1);
                        }
                    } else if ((i + j) % 2 == 0) {
                        String path = "/images/Background1.png";
                        URL url = this.getClass().getResource(path);
                        ImageIcon icon = new ImageIcon(url);
                        JLabel temp = matriz_label[i][j];
                        temp.setIcon(icon);
                        principal_board[i][j] = new Empty(0);
                    } else {
                        String path = "/images/Background2.png";
                        URL url = this.getClass().getResource(path);
                        ImageIcon icon = new ImageIcon(url);
                        JLabel temp = matriz_label[i][j];
                        temp.setIcon(icon);
                        principal_board[i][j] = new Empty(0);
                    }
                }
            }
        }

    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                System.out.print(principal_board[i][j] + " ");
            }
            System.out.println("");
        }
        if (validBoard(principal_board)) {
            if (validpositionKing(principal_board)) {
                if (validTabla(principal_board)) {
                    Movement principal = new Movement(new Empty(0), "0,0", "0,0");
                    Tree root = new Tree(new Mapping(principal_board, principal));
                    mapping(root.getRoot(), 0);
                    Menu.setModal(true);
                    Menu.pack();
                    Menu.setLocationRelativeTo(this);
                    Menu.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Tie! Not enough pieces to win on either side");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Kings cannot be in adjacent places");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Incorrect placement");
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        refresh(lista_peon);
        Show.setModal(true);
        Show.pack();
        Show.setLocationRelativeTo(this);
        Show.setVisible(true);
    }//GEN-LAST:event_jButton3MouseClicked

    public void refresh(LinkedList elements) {
        textArea.setText("");
        if (elements.getSize() > 0) {
            TreeNode router = (TreeNode) elements.at(0);
            LinkedList tree = router.getBranches();
            for (int i = router.getBranches().getSize() - 1; i >= 0; i--) {
                textArea.setText(textArea.getText() + router.getBranches().at(i) + "\n");
            }
        }
    }

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        refresh(knight);
        Show.setModal(true);
        Show.pack();
        Show.setLocationRelativeTo(this);
        Show.setVisible(true);
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        refresh(queen);
        Show.setModal(true);
        Show.pack();
        Show.setLocationRelativeTo(this);
        Show.setVisible(true);
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        refresh(check);
        Show.setModal(true);
        Show.pack();
        Show.setLocationRelativeTo(this);
        Show.setVisible(true);
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4MouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Label00;
    private javax.swing.JLabel Label01;
    private javax.swing.JLabel Label02;
    private javax.swing.JLabel Label03;
    private javax.swing.JLabel Label04;
    private javax.swing.JLabel Label05;
    private javax.swing.JLabel Label06;
    private javax.swing.JLabel Label07;
    private javax.swing.JLabel Label10;
    private javax.swing.JLabel Label11;
    private javax.swing.JLabel Label12;
    private javax.swing.JLabel Label13;
    private javax.swing.JLabel Label14;
    private javax.swing.JLabel Label15;
    private javax.swing.JLabel Label16;
    private javax.swing.JLabel Label17;
    private javax.swing.JLabel Label20;
    private javax.swing.JLabel Label21;
    private javax.swing.JLabel Label22;
    private javax.swing.JLabel Label23;
    private javax.swing.JLabel Label24;
    private javax.swing.JLabel Label25;
    private javax.swing.JLabel Label26;
    private javax.swing.JLabel Label27;
    private javax.swing.JLabel Label30;
    private javax.swing.JLabel Label31;
    private javax.swing.JLabel Label32;
    private javax.swing.JLabel Label33;
    private javax.swing.JLabel Label34;
    private javax.swing.JLabel Label35;
    private javax.swing.JLabel Label36;
    private javax.swing.JLabel Label37;
    private javax.swing.JLabel Label40;
    private javax.swing.JLabel Label41;
    private javax.swing.JLabel Label42;
    private javax.swing.JLabel Label43;
    private javax.swing.JLabel Label44;
    private javax.swing.JLabel Label45;
    private javax.swing.JLabel Label46;
    private javax.swing.JLabel Label47;
    private javax.swing.JLabel Label50;
    private javax.swing.JLabel Label51;
    private javax.swing.JLabel Label52;
    private javax.swing.JLabel Label53;
    private javax.swing.JLabel Label54;
    private javax.swing.JLabel Label55;
    private javax.swing.JLabel Label56;
    private javax.swing.JLabel Label57;
    private javax.swing.JLabel Label60;
    private javax.swing.JLabel Label61;
    private javax.swing.JLabel Label62;
    private javax.swing.JLabel Label63;
    private javax.swing.JLabel Label64;
    private javax.swing.JLabel Label65;
    private javax.swing.JLabel Label66;
    private javax.swing.JLabel Label67;
    private javax.swing.JLabel Label70;
    private javax.swing.JLabel Label71;
    private javax.swing.JLabel Label72;
    private javax.swing.JLabel Label73;
    private javax.swing.JLabel Label74;
    private javax.swing.JLabel Label75;
    private javax.swing.JLabel Label76;
    private javax.swing.JLabel Label77;
    private javax.swing.JDialog Menu;
    private javax.swing.JDialog Show;
    private javax.swing.JSpinner Spinner_i;
    private javax.swing.JSpinner Spinner_j;
    private javax.swing.JComboBox cbColor;
    private javax.swing.JComboBox cbPiece;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

    public boolean validBoard(Piece[][] board) {
        int contK1 = 0;
        int contK2 = 0;
        int contQ1 = 0;
        int contQ2 = 0;
        int contC1 = 0;
        int contC2 = 0;
        int contP1 = 0;
        int contP2 = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] instanceof King) {
                    if (board[i][j].getPlayer() == 1) {
                        contK1++;
                    } else {
                        contK2++;
                    }
                } else if (board[i][j] instanceof Queen) {
                    if (board[i][j].getPlayer() == 1) {
                        contQ1++;
                    } else {
                        contQ2++;
                    }
                } else if (board[i][j] instanceof Knight) {
                    if (board[i][j].getPlayer() == 1) {
                        contC1++;
                    } else {
                        contC2++;
                    }
                } else if (board[i][j] instanceof Pawn) {
                    if (board[i][j].getPlayer() == 1) {
                        contP1++;
                    } else {
                        contP2++;
                    }
                }
            }
        }
        return contK1 == 1 && contK2 == 1 && contQ1 < 2 && contQ2 < 2 && contC1 < 3 && contC2 < 3 && contP1 < 9 && contP2 < 9;
    }

    public boolean validpositionKing(Piece[][] board) {
        int i1 = 0, j1 = 0, i2 = 0, j2 = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] instanceof King) {
                    if (board[i][j].getPlayer() == 1) {
                        i1 = i;
                        j1 = j;
                    } else {
                        i2 = i;
                        j2 = j;
                    }
                }
            }
        }
        return !((j1 == j2 && abs(i1 - i2) == 1) || (i1 == i2 && abs(j1 - j2) == 1));
    }

    public boolean validTabla(Piece[][] board) {
        int cont = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] instanceof Empty) {
                } else {
                    cont++;
                }
            }
        }
        if (cont == 2) {
            return false;
        } else {
            return true;
        }
    }

    public static Piece[][] copy_board(Piece[][] board) {
        Piece[][] temporal = new Piece[8][8];
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                temporal[i][j] = board[i][j];
            }
        }
        return temporal;
    }

    public static void mapping(TreeNode currentNode, int cont) {
        Queue map = new Queue();
        map.queue(currentNode);
        while (!map.isEmpty() && ((TreeNode) map.peek()).getDepth() < 5) {
            TreeNode node = (TreeNode) map.dequeue();
            traverse_tree(node, node.getDepth());
            if (node.getChildCount() > 0) {
                for (int i = 0; i < node.getChildCount(); i++) {
                    TreeNode child = (TreeNode) node.getChildAt(i);
                    map.queue(child);
                }
            }
        }
    }

    public static void traverse_tree(TreeNode currentNode, int cont) {
        System.out.println("================== Nivel " + currentNode.getDepth() + " ======================== ");
        if (currentNode.getDepth() < 25) {
            int player, enemy;
            if (cont % 2 == 0) {
                player = 1;
                enemy = 2;
            } else {
                player = 2;
                enemy = 1;
            }
            System.out.println("El movimiento que se está procesando es : " + currentNode.toString());
            System.out.println("");
            Mapping temp = (Mapping) currentNode.getValue();
            Piece[][] father_board = temp.getBoard();
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    for (int k = 0; k < 8; k++) {
                        for (int l = 0; l < 8; l++) {
                            if (father_board[i][j].getPlayer() == player) {
                                if (father_board[i][j].validation(father_board, i, j, k, l)) {
                                    Piece[][] board = copy_board(father_board);
                                    if (board[i][j].getPlayer() == 1 && (board[k][l].getPlayer() == 2 || board[k][l].getPlayer() == 0)) {
                                        int x1, y1, x2, y2;
                                        if (cont == 0) {
                                            x1 = i;
                                            y1 = j;
                                            x2 = k;
                                            y2 = l;
                                        } else {
                                            Mapping father = (Mapping) currentNode.getParent().getValue();
                                            Movement previous = father.getLast();
                                            String coo1 = previous.getCoor1();
                                            String coo2 = previous.getCoor2();
                                            String[] split1 = coo1.split(",");
                                            String[] split2 = coo2.split(",");
                                            x1 = Integer.parseInt(split1[0]);
                                            y1 = Integer.parseInt(split1[1]);
                                            x2 = Integer.parseInt(split2[0]);
                                            y2 = Integer.parseInt(split2[1]);
                                        }
                                        if (x1 == k && y1 == l && x2 == i && y2 == j) {
                                        } else if (board[k][l] instanceof King) {
                                        } else {
                                            board[k][l] = board[i][j];
                                            board[i][j] = new Empty(0);
                                            String coor1 = i + "," + j;
                                            String coor2 = k + "," + l;
                                            Movement last = new Movement(board[k][l], coor1, coor2);
                                            for (int a = 0; a < 8; a++) {
                                                for (int b = 0; b < 8; b++) {
                                                    System.out.print(board[a][b] + " ");
                                                }
                                                System.out.println("");
                                            }
                                            Mapping map = new Mapping(board, last);
                                            if (board[k][l] instanceof Pawn) {
                                                if (k == 0) {
                                                    lista_peon.push_back(currentNode);
                                                }
                                            }

                                            System.out.println("");
                                            TreeNode element = new TreeNode(map, currentNode);
                                            currentNode.addSon(element);
                                            if (isCheck(board, enemy)) {
                                                check.push_back(element);
                                            }

                                            if (wasEatKhigth(father_board, board)) {
                                                knight.push_back(element);
                                            }

                                            if (wasEatQueen(father_board, board)) {
                                                queen.push_back(element);
                                            }
                                        }
                                    } else if (board[i][j].getPlayer() == 2 && (board[k][l].getPlayer() == 1 || board[k][l].getPlayer() == 0)) {
                                        int x1, y1, x2, y2;
                                        if (cont == 0) {
                                            x1 = i;
                                            y1 = j;
                                            x2 = k;
                                            y2 = l;
                                        } else {
                                            Mapping father = (Mapping) currentNode.getParent().getValue();
                                            Movement previous = father.getLast();
                                            String coo1 = previous.getCoor1();
                                            String coo2 = previous.getCoor2();
                                            String[] split1 = coo1.split(",");
                                            String[] split2 = coo2.split(",");
                                            x1 = Integer.parseInt(split1[0]);
                                            y1 = Integer.parseInt(split1[1]);
                                            x2 = Integer.parseInt(split2[0]);
                                            y2 = Integer.parseInt(split2[1]);
                                        }
                                        if (x1 == k && y1 == l && x2 == i && y2 == j) {
                                        } else if (board[k][l] instanceof King) {
                                        } else {
                                            board[k][l] = board[i][j];
                                            board[i][j] = new Empty(0);
                                            String coor1 = i + "," + j;
                                            String coor2 = k + "," + l;
                                            Movement last = new Movement(board[k][l], coor1, coor2);
                                            Mapping map = new Mapping(board, last);

                                            TreeNode element = new TreeNode(map, currentNode);
                                            currentNode.addSon(element);

                                            for (int a = 0; a < 8; a++) {
                                                for (int b = 0; b < 8; b++) {
                                                    System.out.print(board[a][b] + " ");
                                                }
                                                System.out.println("");
                                            }
                                            System.out.println("");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

    }

    public static boolean wasEatKhigth(Piece[][] board, Piece[][] board2) {
        int horse1 = 0;
        int horse2 = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] instanceof Knight && board[i][j].getPlayer() == 2) {
                    horse1++;
                }
                if (board2[i][j] instanceof Knight && board2[i][j].getPlayer() == 2) {
                    horse2++;
                }
            }
        }
        return horse1 != horse2;
    }

    public static boolean wasEatQueen(Piece[][] board, Piece[][] board2) {
        int queen1 = 0;
        int queen2 = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] instanceof Queen && board[i][j].getPlayer() == 2) {
                    queen1++;
                }
                if (board2[i][j] instanceof Queen && board2[i][j].getPlayer() == 2) {
                    queen2++;
                }
            }
        }
        return queen1 != queen2;
    }

    public static boolean isCheck(Piece[][] board, int player) {
        String placeToKing = placeToKing(board, player);
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                String tempPosition = "" + i + "," + j;
                if (isValidMove(board, tempPosition, placeToKing)) {
                    return true;
                }
            }
        }
        return false;
    }

    public static String placeToKing(Piece[][] board, int player) {
        for (int i = 0; i < 8; ++i) {
            for (int j = 0; j < 8; ++j) {
                if (board[i][j] instanceof King && board[i][j].getPlayer() == player) {
                    return "" + i + "," + j;
                }
            }
        }
        return "";
    }

    public static boolean isValidMove(Piece[][] board, String initial, String end) {
        int initialX = Integer.parseInt(initial.split(",")[0]);
        int initialY = Integer.parseInt(initial.split(",")[1]);
        int endX = Integer.parseInt(end.split(",")[0]);
        int endY = Integer.parseInt(end.split(",")[1]);
        if (endX < 0 || endX > 7 || endY < 0 || endY > 7 || initialX < 0 || initialX > 7 || initialY < 0 || initialY > 7) {
            return false;
        } else {
            boolean isEmpty = isEmpty(board, initial);
            boolean isValidDestiny = isValidDestiny(board, initial, end);
            boolean isValidMove = board[initialX][initialY].validation(board, initialX, initialY, endX, endY);
            boolean isHungryPeon = isHungryPeon(board, initial, end);
            return !isEmpty && isValidDestiny && (isValidMove || isHungryPeon);
        }
    }

    public static boolean isValidDestiny(Piece[][] board, String initial, String end) {
        return !isSameColor(board, initial, end) && !isSomethingInMiddle(board, initial, end);
    }

    public static boolean isSomethingInMiddle(Piece[][] board, String initial, String end) {
        int initX = Integer.parseInt(initial.split(",")[0]);
        int initY = Integer.parseInt(initial.split(",")[1]);
        int endX = Integer.parseInt(end.split(",")[0]);
        int endY = Integer.parseInt(end.split(",")[1]);
        Piece attacker = board[initX][initY];
        Piece attacked = board[endX][endY];
        if (attacker instanceof Pawn) {
            return (!(attacked instanceof Empty)) && !isHungryPeon(board, initial, end);
        } else if (attacker instanceof Knight) {
            return false;
        } else if (attacker instanceof King) {
            return false;
        } else if (board[initX][initY] instanceof Queen) {
            if (initX + initY == endX + endY) {
                if (endX < initX && endY > initY) {
                    int referencesY = endY - 1;
                    for (int i = endX + 1; i < initX; ++i) {
                        if (!(board[i][referencesY] instanceof Empty)) {
                            return true;
                        }
                        referencesY--;
                    }
                    return false;
                } else if (endX > initX && endY < initY) {
                    int referencesY = endY + 1;
                    for (int i = endX - 1; i > initX; --i) {
                        if (!(board[i][referencesY] instanceof Empty)) {
                            return true;
                        }
                        referencesY++;
                    }
                    return false;
                }
            } else if (initX - initY == endX - endY) {
                if (endX < initX && endY < initY) {
                    int referencesY = endY + 1;
                    for (int i = endX + 1; i < initX; ++i) {
                        if (!(board[i][referencesY] instanceof Empty)) {
                            return true;
                        }
                        referencesY++;
                    }
                    return false;
                } else if (endX > initX && endY > initY) {
                    int referencesY = endY - 1;
                    for (int i = endX - 1; i > initX; --i) {
                        if (!(board[i][referencesY] instanceof Empty)) {
                            return true;
                        }
                        referencesY--;
                    }
                    return false;
                }
            }
            if (endY > initY) { // se mueve a la derecha.
                for (int i = endY - 1; i > initY; --i) {
                    if (!(board[initX][i] instanceof Empty)) {
                        return true;
                    }
                }
                return false;
            } else if (initY > endY) { // se mueve a la izquierda.
                for (int i = endY + 1; i < initY; ++i) {
                    if (!(board[initX][i] instanceof Empty)) {
                        return true;
                    }
                }
                return false;
            } else if (endX > initX) { // se mueve a abajo.
                for (int i = endX - 1; i > initX; --i) {
                    if (!(board[i][initY] instanceof Empty)) {
                        return true;
                    }
                }
                return false;
            } else if (initX > endX) { // se mueve a la arriba.
                for (int i = endX + 1; i < initX; ++i) {
                    if (!(board[i][initY] instanceof Empty)) {
                        return true;
                    }
                }
                return false;
            }
        }

        return false;
    }

    public static boolean isSameColor(Piece[][] board, String initial, String end) {
        int initialX = Integer.parseInt(initial.split(",")[0]);
        int initialY = Integer.parseInt(initial.split(",")[1]);
        int endX = Integer.parseInt(end.split(",")[0]);
        int endY = Integer.parseInt(end.split(",")[1]);
        return board[endX][endY].getPlayer() == board[initialX][initialY].getPlayer();
    }

    public static boolean isHungryPeon(Piece[][] board, String initial, String end) {
        int initialX = Integer.parseInt(initial.split(",")[0]);
        int initialY = Integer.parseInt(initial.split(",")[1]);
        int endX = Integer.parseInt(end.split(",")[0]);
        int endY = Integer.parseInt(end.split(",")[1]);
        Piece attacker = board[initialX][initialY];
        Piece attacked = board[endX][endY];
        if (attacker instanceof Pawn) {
            if (!(attacked instanceof Empty)) {
                if (attacker.getPlayer() == 1) {
                    if (endX == initialX - 1 && endY == initialY + 1) {
                        return true;
                    } else if (endX == initialX - 1 && endY == initialY - 1) {
                        return true;
                    } else {
                        return false;
                    }
                } else if (attacker.getPlayer() == 2) {
                    if (endX == initialX + 1 && endY == initialY + 1) {
                        return true;
                    } else if (endX == initialX + 1 && endY == initialY - 1) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public static boolean isEmpty(Piece[][] board, String initial) {
        int initialX = Integer.parseInt(initial.split(",")[0]);
        int initialY = Integer.parseInt(initial.split(",")[1]);
        return board[initialX][initialY] instanceof Empty;
    }

}
